name: 'Falco Action Start'
description: 'Run Falco in a GitHub action'
author: 'The Falco Authors'
inputs:
  mode: 
    description: 'Start action with a mode. Can be live or analyze'
    required: false
    default: 'live'
  falco-version: 
    description: 'Falco version to use'
    required: false
    default: 'latest'
  config-file:
    description: 'Start action with a config file'
    required: false
    default: 'src/syscall_ignore.config'
  verbose:
    description: 'Enable verbose logs'
    type: boolean
    default: false
runs:
  using: 'composite'
  steps:
  - name: Validate mode
    shell: bash
    run: |
      if [[ "${{ inputs.mode }}" != "live" && "${{ inputs.mode }}" != "analyze" ]]; then
        echo "Invalid mode. Must be either live or analyze"
        exit 1
      fi
  - name: Start Falco
    if: ${{ inputs.mode == 'live' }}
    shell: bash
    run: |
      if [[ "${{ inputs.verbose }}" == "true" ]]; then
        set -x
      fi

      docker run --rm -d \
        --name falco \
        --privileged \
        -v /var/run/docker.sock:/host/var/run/docker.sock \
        -v /proc:/host/proc:ro \
        -v /etc:/host/etc:ro \
        falcosecurity/falco-no-driver:${{ inputs.falco-version }} falco -o "json_output=true" -o "file_output.enabled=true" -o "file_output.keep_alive=false" -o "file_output.filename=/tmp/falco_events.json" -o "engine.kind=modern_ebpf"

      # Wait for the Falco container to be fully started
      for i in {1..30}; do
        if docker ps --filter "name=falco" --filter "status=running" | grep -q falco; then
          break
        fi
        sleep 1
      done

      if ! docker ps --filter "name=falco" --filter "status=running" | grep -q falco; then
        echo "Falco container failed to start"
        exit 1
      fi

      docker logs falco
  
  - name: Start Sysdig capture
    if: ${{ inputs.mode == 'analyze' }}
    shell: bash
    run: |
      if [[ "${{ inputs.verbose }}" == "true" ]]; then
        set -x
      fi

      IGNORE_FILTER_FOLDER=${{github.action_path}}/src
      CONFIG_FILE="${{github.action_path}}/${{inputs.config-file}}"

      if [ ! -e "$CONFIG_FILE" ]; then
        echo "Config File does not exist."
        echo $CONFIG_FILE
        exit 1
      fi

      if [[ "${{ inputs.verbose }}" == "true" ]]; then
        echo "Config File:"
        cat $CONFIG_FILE
      fi

      echo "Creating ignore filters"
      IGNORE_SYSCALLS_FILTER="and not evt.type in ( $(jq -r -f $IGNORE_FILTER_FOLDER/ignore_syscalls.jq $CONFIG_FILE) ) "

      if [[ "${{ inputs.verbose }}" == "true" ]]; then
        echo "Ignored Syscalls:"
        echo $IGNORE_SYSCALLS_FILTER
      fi

      echo "Creating Sysdig container"
      docker run --rm -d --name sysdig --privileged \
      -v /var/run/docker.sock:/host/var/run/docker.sock \
      -v /dev:/host/dev -v /proc:/host/proc:ro \
      -v /boot:/host/boot:ro \
      -v /lib/modules:/host/lib/modules:ro \
      -v /usr:/host/usr:ro \
      -v /tmp:/tmp \
      --net=host sysdig/sysdig:latest sysdig --modern-bpf -w /tmp/capture.scap --snaplen=256 "not evt.type in (switch) $IGNORE_SYSCALLS_FILTER"
      echo "Sysdig started"

      # Ensure Sysdig container is running
      sleep 10 # todo(loresuso): replace with a more robust check

      if [[ "${{ inputs.verbose }}" == "true" ]]; then
        docker ps -a
        docker logs sysdig
      fi