name: 'Falco Action Stop'
description: 'Run Falco in a GitHub Action'
author: 'The Falco Authors'
inputs:
  mode:
    description: 'Stop action with a mode. Can be live or analyze'
    required: false
    default: 'live'
  verbose:
    description: "Enable verbose logs"
    type: boolean
    default: false
runs:
  using: 'composite'
  steps:
  - name: Validate mode
    shell: bash
    run: |
      if [[ "${{ inputs.mode }}" != "live" && "${{ inputs.mode }}" != "analyze" ]]; then
        echo "Invalid mode. Must be either live or analyze"
        exit 1
      fi
  
  - name: Stop Falco or Sysdig containers
    shell: bash
    run: |
      echo "Stopping containers"
      docker ps
      falco=$(docker ps --format '{{.Names}}' | grep -o falco)
      if [[ ! -z "$falco" ]]; then
        docker stop falco
      fi
      sysdig=$(docker ps --format '{{.Names}}' | grep -o sysdig)
      if [[ ! -z "$sysdig" ]]; then
        docker stop sysdig
      fi
  
  - name: Retrieve Job Info using GitHub API
    shell: bash
    if: ${{ inputs.mode == 'live' }}
    env:
      RUN_ID: ${{ github.run_id }}
      REPO: ${{ github.repository }}
    run: |
      # If we are in live mode, we need to retrieve the job details to get the steps with timestamps
      # This is useful to understand in which step the security event occured and requires to access the GitHub API
      echo "Retrieving details for run_id=$RUN_ID"
      curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/jobs > jobs.json
      
      # Parse JSON and retrieve step info with timestamps
      echo "Job details:"
      jq -c '.jobs[] | {job_id: .id, job_name: .name, steps: .steps[] | {name: .name, started_at: .started_at, completed_at: .completed_at, status: .status}}' jobs.json > steps.json

      if [[ "${{ inputs.verbose }}" == "true" ]]; then
        cat steps.json
      fi
      mv steps.json /tmp/steps.json

  - name: Build Live Summary
    if: ${{ inputs.mode == 'live' }}
    shell: bash
    run: |
      python3 -m pip install -r ${{github.action_path}}/src/requirements.txt
      # Falco events
      if [[ -s /tmp/falco_events.json ]]; then
        echo "Printing triggered rules in Job summary"
        echo "# Report Details" >> /tmp/report_output.md
        echo "## Falco Events" >> /tmp/report_output.md
        content=$(python3 ${{github.action_path}}/src/falco_events_to_md.py /tmp/falco_events.json /tmp/steps.json)
        echo "$content" >> /tmp/report_output.md
      
        # Create PR comment with triggered rules, else append to summary
        if ${{ github.event_name == 'pull_request' }}; then
          echo "Creating PR comment with triggered signatures"
          FILE_CONTENT=$(echo "$content" | sed 's/\\/\\\\/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"***Falco Rules*** \\n\\n ${FILE_CONTENT} \\n\\n Find out more at https://github.com/$REPO/actions/runs/$RUN_ID\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
        else
          cat /tmp/report_output.md >> $GITHUB_STEP_SUMMARY
        fi
      fi
  
  - name: Upload Capture for Analyze mode
    if: ${{ inputs.mode == 'analyze' }}
    uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
    with:
      name: capture
      path: /tmp/capture.scap

  - name: Extract executables' hash
    if: ${{ inputs.mode == 'analyze' }}
    shell: bash
    env:
      VERBOSE: ${{ inputs.verbose }}
    run: |      
      # Extract executables' hash. Since hashes are computed afterwards and not by Sysdig, we need to extract them from the runner of this job.
      # This is workaround, hashes should be computed in real-time by sysdig. Just hash the exepath we know that have been executed for now.
      ${{github.action_path}}/src/run_sysdig.sh filter "/tmp/capture.scap" "$OUTBOUND_FILTER $CUSTOM_FILTERS" "$OUTBOUND_OUTPUT" "/tmp/proc.txt"
      cat /tmp/proc.txt | jq '."proc.exepath"' | tr -d "\"" | while read -r file; do
        if [ -f "$file" ]; then
            line=$(sha256sum "$file")
            sha=$(echo "$line" | awk '{print $1}')
            file=$(echo "$line" | awk '{print $2}')
            echo "{ \"sha256\": \"$sha\", \"filename\": \"$file\" }"
        else
            echo "Warning: File $file does not exist anymore when extracting its SHA256 hash" >&2
        fi 
      done > /tmp/hashes.txt

      sort -u -o /tmp/hashes.txt /tmp/hashes.txt

  - name: Upload Hashes
    if: ${{ inputs.mode == 'analyze' }}
    uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
    with:
      name: hashes
      path: /tmp/hashes.txt
